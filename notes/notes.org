* 2013-01-31
** loop to scrape 24 hours worth of data
#+BEGIN_SRC python
  import time
  import cta_analytics.scraper as cas
  db = cas.mongo_wrapper(server='192.168.1.120')
  route_list = [2, 6, 55, 146, 136]
  stop_list = [4862, 1427, 14019, 5037, 10575, 15193]
  for j in range(25 * 60):
      try:
          db.add_bus_locations(cas.get_buses_on_route(route_list))
          db.add_stop_prediction(cas.get_predictions(stop_list))
      except:
          print 'there was an error'
      print 'fired'
      time.sleep(60)


#+END_SRC

* 2013-02-06
** ret-conning time stamps
#+BEGIN_SRC python
  for d in bus_loc_coll.find():
      if 'timestamp' in d:
          continue
      time_stamp = cas.parse_date(d['tmstmp'])
      bus_loc_coll.update({'_id': d['_id']},
                          '$set': {'timestamp': time_stamp})
#+END_SRC
#+BEGIN_SRC python
  for d in prediction_coll.find():
      if 'timestamp' in d:
          continue
      time_stamp = cas.parse_date(d['tmstmp'])
      prd_time = cas.parse_date(d['prdtm'])
      prediction_coll.update({'_id': d['_id']},
                             '$set': {'timestamp': time_stamp, 'prd_time': prd_time})


#+END_SRC
** remove mangled entries
#+BEGIN_SRC python
  for d in prediction_coll.find():
      if 'rt' in d:
          continue
      prediction_coll.remove({'_id': d['_id']})


  for d in bus_loc_coll.find():
      if 'rt' in d:
          continue

      bus_loc_coll.remove({'_id': d['_id']})
#+END_SRC
* 2013-02-09
** getting data out
#+BEGIN_SRC python
  from datetime import date, time, datetime, timedelta
  import pandas as pd

  def get_route_by_day(rt, date):
      start_time = datetime.combine(date, time(4))
      end_time = start_time + timedelta(days=1)

      res = []
      for r in bus_col.find({'rt': rt,
                             "timestamp": {"$lt": end_time},
                             "timestamp": {"$gt": start_time}}):
          res.append(r)


      return pd.DataFrame(res)

  def fix_types(input_df):
      type_map_dict = {'hdg': np.int,
                       'lat': np.float,
                       'lon': np.float,
                       'pdist': np.int}

      for f,t in type_map_dict.iteritems():
          input_df[f] = input_df[f].astype(t)

      return input_df


#+END_SRC
** looking at patterns
#+BEGIN_SRC python
  pid_dicts = cas.get_pattern_by_pid(','.join(pids))
  [(k, len(v['pts']), v['ln'], v['rtdir']) for k,v in pid_dicts.iteritems()]
#+END_SRC
#+BEGIN_SRC python
  import itertools
  figure()
  ax = gca()
  for i, ((k,v), c) in enumerate(itertools.izip(pid_dicts.iteritems(), ['r', 'b', 'g', 'm', 'k'])):

      lats = np.asarray([np.float(p['lat']) for p in v['pts']]) + .001 * i
      lons = np.asarray([np.float(p['lon']) for p in v['pts']]) + .001 * i

      slats = np.asarray([np.float(p['lat']) for p in v['pts'] if p['typ'] == 'S']) + .001 * i
      slons = np.asarray([np.float(p['lon']) for p in v['pts'] if p['typ'] == 'S']) + .001 * i

      ax.plot(lons, lats, label=k, color=c)
      if v['rtdir'] == 'South Bound':
          marker = 'o'
      elif v['rtdir'] == 'North Bound':
          marker = 's'
      ax.plot(slons, slats, marker=marker, linestyle='none', color=c)

  legend()
#+END_SRC

* 2013-02-12
** segment runs
#+BEGIN_SRC python
  from itertools import tee, izip
  def split():
      pass

  def speed(group):
      pdist_diff = group.pdist.diff()
      time_diff = group.timestamp.diff().fillna(timedelta(0)).apply(timedelta.total_seconds)

      plot(group.timestamp, pdist_diff/time_diff)

  def pairwise(iterable):
      "s -> (s0,s1), (s1,s2), (s2, s3), ..."
      a, b = tee(iterable)
      next(b, None)
      return izip(a, b)


  def split(group):
      pdist_diff = group.pdist.diff()
      steps = [0] + list(np.where(group.pdist.diff() < 0)[0]) + [group.shape[0]]

      res_list = list()
      for a, b in pairwise(steps):
          tmp_frame = group[slice(a,b)]
          tmp_frame = tmp_frame.set_index('timestamp')
          res_list.append(tmp_frame)
      return res_list


#+END_SRC

* 2013-04-09
** set up
#+BEGIN_SRC python
  sys.path.append('/home/tcaswell/open_gov/cta_analytics')
  import cta_analytics.db as cadb
  mongow = cadb.mongo_wrapper('192.168.7.107')
  bus_col = mongow.db.bus_location
  import cta_analytics.scraper as cas
#+END_SRC
